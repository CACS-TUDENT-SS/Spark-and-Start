#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Wire.h>

// OLED config
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET    -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Pin definitions
#define BTN_PIN 0       // GPIO0 – Push Button
#define BUZZER_PIN 14   // GPIO14 – Buzzer

// Game variables
int dinoY = 44;
int velocity = 0;
bool jumping = false;
int cactusX = SCREEN_WIDTH;
bool gameOver = false;

void setup() {
  // Set pin modes
  pinMode(BTN_PIN, INPUT_PULLUP);  // Use internal pull-up
  pinMode(BUZZER_PIN, OUTPUT);

  // Start OLED display
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  display.display(); // Initialize with blank screen
}

void loop() {
  if (!gameOver) {
    display.clearDisplay();

    // Draw ground
    display.drawLine(0, 63, 128, 63, WHITE);

    // Check button press (LOW means pressed)
    if (digitalRead(BTN_PIN) == LOW && !jumping) {
      velocity = -10;
      jumping = true;
    }

    // Update dino Y position (gravity)
    dinoY += velocity;
    velocity += 1;

    if (dinoY >= 44) {
      dinoY = 44;
      jumping = false;
    }

    // Draw dino
    display.fillRect(10, dinoY, 10, 10, WHITE);

    // Update cactus position
    cactusX -= 4;
    if (cactusX < -10) cactusX = 128;

    // Draw cactus
    display.fillRect(cactusX, 54, 8, 10, WHITE);

    // Check collision
    if (cactusX < 20 && cactusX > 5 && dinoY > 34) {
      gameOver = true;
      tone(BUZZER_PIN, 1000, 300);  // Play buzzer for 300ms
    }

    display.display();
    delay(30);
  } else {
    // Game Over screen
    display.clearDisplay();
    display.setTextSize(2);
    display.setTextColor(WHITE);
    display.setCursor(20, 20);
    display.println("Game Over");
    display.display();

    // Wait for button press to restart
    if (digitalRead(BTN_PIN) == LOW) {
      cactusX = SCREEN_WIDTH;
      dinoY = 44;
      velocity = 0;
      gameOver = false;
      delay(300);  // Prevent bounce
    }
  }
}
